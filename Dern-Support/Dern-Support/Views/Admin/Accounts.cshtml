@{
    ViewData["Title"] = "User Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - DernSupport2</title>
    <style>
        /* General styles for the body */
body {
    font-family: Arial, sans-serif;
    color: #333;
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
}

        .container1 {
            padding: 20px;
           
            margin: auto;
          
        }

/* Admin hero section styling */
.admin-hero {
    background-color: #007bff;
    color: #fff;
    text-align: center;
    padding: 20px 0;
    margin-bottom: 20px;
}

.admin-hero h1 {
    margin: 0;
    font-size: 2em;
}

.admin-hero p {
    margin: 10px 0 0;
    font-size: 1.2em;
}

/* Admin content section styling */
.admin-content {
    display: flex;
    justify-content: space-between;
    gap: 20px;
}

/* User list section styling */
.user-list {
    flex: 1;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    padding: 20px;
}

.user-list h3 {
    margin-top: 0;
    color: #007bff;
}

.user-list table {
    width: 100%;
    border-collapse: collapse;
}

.user-list th, .user-list td {
    padding: 12px;
    border: 1px solid #ddd;
    text-align: left;
}

.user-list th {
    background-color: #007bff;
    color: #fff;
}

.user-list tr:nth-child(even) {
    background-color: #f9f9f9;
}

.user-list tr:hover {
    background-color: #eef3ff;
}

/* Form container styling */
.form-container {
    flex: 1;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    padding: 20px;
}

.form-container h3 {
    margin-top: 0;
    color: #007bff;
}

.form-group {
    margin-bottom: 15px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

.form-group input, .form-group select {
    width: 100%;
    padding: 10px;
    border-radius: 4px;
    border: 1px solid #ddd;
}

.btn {
    width: 100%;
    padding: 10px;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    border: none;
    font-size: 16px;
}

.btn-primary {
    background-color: #007bff;
    color: white;
}

.btn-primary:hover {
    background-color: #0056b3;
}

/* Responsive adjustments */
@@media (max-width: 768px) {
    .admin-content {
        flex-direction: column;
    }
}

    </style>
</head>
<body>
  
    
    <div class="container1">
    <section class="admin-content">
        <!-- User List Section -->
        <div class="user-list">
            <h3>Users</h3>
            <table>
                <thead>
                    <tr>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Email</th>
                        <th>Role</th>
                    </tr>
                </thead>
                <tbody id="user-table-body">
                    <!-- Users will be dynamically loaded here -->
                </tbody>
            </table>
        </div>

        <!-- Create User Form -->
        <div class="form-container">
            <h3>Create New User</h3>
            <form id="createUserForm" method="post">
                <div class="form-group">
                    <label for="Username">Username</label>
                    <input type="text" class="form-control" id="Username" name="Username" required />
                </div>
                <div class="form-group">
                    <label for="FirstName">First Name</label>
                    <input type="text" class="form-control" id="FirstName" name="FirstName" required />
                </div>
                <div class="form-group">
                    <label for="LastName">Last Name</label>
                    <input type="text" class="form-control" id="LastName" name="LastName" required />
                </div>
                <div class="form-group">
                    <label for="Email">Email</label>
                    <input type="email" class="form-control" id="Email" name="Email" required />
                </div>
                <div class="form-group">
                    <label for="Password">Password</label>
                    <input type="password" class="form-control" id="Password" name="Password" required />
                </div>
                <div class="form-group">
                    <label for="Role">Role</label>
                    <select class="form-control" id="Role" name="Role" required>
                        <option value="Admin">Admin</option>
                        <option value="Customer">Customer</option>
                        <option value="Employee">Employee</option>
                    </select>
                </div>
                <button type="submit" class="btn btn-primary">Create User</button>
            </form>
            <div id="resultMessage" class="mt-3"></div>
        </div>
    </section>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            loadUsers();

            // Load all users
            async function loadUsers() {
                try {
                    const response = await fetch('/api/AllUsers', {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': 'Bearer ' + localStorage.getItem('token') // Add token if required
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Failed to load users');
                    }

                    const users = await response.json();
                    const userTableBody = document.getElementById('user-table-body');
                    userTableBody.innerHTML = '';

                    users.forEach(user => {
                        const row = document.createElement('tr');

                        row.innerHTML = `
                                    <td>${user.firstName}</td>
                                    <td>${user.lastName}</td>
                                    <td>${user.email}</td>
                                    <td>${user.role}</td>
                                `;

                        userTableBody.appendChild(row);
                    });
                } catch (error) {
                    console.error('Error loading users:', error);
                }
            }

            // Handle form submission to create a new user
            document.getElementById('createUserForm').addEventListener('submit', async function (event) {
                event.preventDefault();

                const formData = new FormData(this);
                const userDto = {
                    Username: formData.get('Username'),
                    FirstName: formData.get('FirstName'),
                    LastName: formData.get('LastName'),
                    Email: formData.get('Email'),
                    Password: formData.get('Password'),
                    Roles: formData.get('Roles')
                };

                try {
                    const response = await fetch('/api/Admin/CreateUser', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': 'Bearer ' + localStorage.getItem('token') // If needed
                        },
                        body: JSON.stringify(userDto)
                    });

                    const result = await response.text();

                    if (response.ok) {
                        document.getElementById('resultMessage').textContent = 'User created successfully.';
                        document.getElementById('resultMessage').style.color = 'green';
                        // Reset the form after successful creation
                        document.getElementById('createUserForm').reset();
                        loadUsers(); // Refresh the user list
                    } else {
                        document.getElementById('resultMessage').textContent = result || 'Failed to create user.';
                        document.getElementById('resultMessage').style.color = 'red';
                    }
                } catch (error) {
                    document.getElementById('resultMessage').textContent = 'An error occurred while creating the user.';
                    document.getElementById('resultMessage').style.color = 'red';
                }
            });
        });
    </script>
</body>
</html>